rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helpers ----------
    function userSnap(uid) {
      return get(/databases/$(database)/documents/users/$(uid));
    }
    function userData(uid) {
      return userSnap(uid).data;
    }
    // ---------- Safer role helpers ----------
    function userExists(uid) {
      return exists(/databases/$(database)/documents/users/$(uid));
    }
    function isSuperAdmin(uid) {
      return userExists(uid) &&
             ('role' in userData(uid)) &&
             userData(uid).role == 'super_admin';
    }
    function isApprovedBrandManager(uid) {
      return userExists(uid) &&
             ('role' in userData(uid)) && userData(uid).role == 'brand_manager' &&
             ('approved' in userData(uid)) && userData(uid).approved == true;
    }

    // Pass a PATH to a post doc
    function isPublicPost(path) {
      return exists(path) && get(path).data.visibility == 'public';
    }

    // ------------------------------------------------------------------
    // Local-dev helpers
    // ------------------------------------------------------------------
    function isDevAdmin() {
      return request.auth != null &&
             ('email' in request.auth.token) &&
             (request.auth.token.email in [
               'liza@engagenatural.com',
               'admin@engagenatural.com'
             ]);
    }

    // ------------------------------------------------------------------
    // Demo-seeding override (local development only)
    //    • Grants create / update / delete to known dev-admin emails
    //    • Placed before specific collection rules so it evaluates first
    // ------------------------------------------------------------------
    match /{document=**} {
      allow create, update, delete: if isDevAdmin();
    }

    // ---------- users ----------
    // TEMPORARY DEMO SEEDING FIX:
    // Allow full access to user documents to unblock seeding/migration.
    // Tighten these rules once permissions are fully resolved.
    match /users/{uid} {
      allow read, write: if true; // TEMPORARY A������,������?o unrestricted for debugging
    }

    // ---------- brands (reference data for brand-owned content) ----------
    // TEMPORARY DEMO SEEDING FIX:
    // Allow any authenticated user to read/write brand documents.
    // NOTE: This is intentionally permissive to unblock demo data seeding.
    //       Tighten these rules after seeding is verified.
    match /brands/{brandId} {
      allow read, write: if true; // TEMPORARY - allows everyone for debugging
    }

    // Allow access to ANY subcollection or document under a brand during debugging
    match /brands/{brandId}/{document=**} {
      allow read, write: if true; // TEMPORARY - allows all subcollections for debugging
    }

    // ---------- test_brands (debugging helper) ----------
    // Used exclusively by local demo seeding scripts to verify permissions.
    // Remove or lock down once seeding issues are resolved.
    match /test_brands/{testId} {
      allow read, write: if true; // TEMPORARY - unrestricted for debugging
    }

    // ---------- retailers (reference data for staff stores) ----------
    // TEMPORARY DEMO SEEDING FIX:
    // Allow any user (even unauthenticated) full access while debugging.
    // Tighten these rules once seeding is confirmed working.
    match /retailers/{retailerId} {
      allow read, write: if true; // TEMPORARY - unrestricted for debugging
    }

    // ---------- trainings (brand publishes; staff self-enroll) ----------
    // TEMPORARY DEMO SEEDING FIX:
    // Allow any authenticated user full access to trainings
    // to unblock demo seeding in emulator/prod. Tighten
    // once seeding is confirmed working.
    match /trainings/{trainingId} {
      allow read, write: if request.auth != null; // TEMPORARY A������,������?o unrestricted
    }

    // ---------- challenges (brand engagement tasks) ----------
    // TEMPORARY DEMO SEEDING FIX:
    // Allow any authenticated user full access while seeding/dev.
    // Tighten these rules once feature and seeding are verified.
    match /challenges/{challengeId} {
      allow read, write: if request.auth != null; // TEMPORARY - permissive for debugging
    }

    // ---------- training_progress (per-user enrollment/progress) ----------
    // TEMPORARY DEMO SEEDING FIX:
    // Allow any authenticated user to read/write training_progress documents.
    // NOTE: This is intentionally permissive to unblock demo data reset.
    //       Tighten these rules after seeding is verified.
    match /training_progress/{progressId} {
      allow read, write: if request.auth != null; // TEMPORARY - permissive for debugging
    }

    // ---------- user_easter_eggs (per-user easter egg finds) ----------
    // TEMPORARY DEMO SEEDING/DEV FIX:
    // Allow any authenticated user to read/write their easter egg progress.
    // Tighten these rules once feature and seeding are verified.
    match /user_easter_eggs/{docId} {
      allow read, write: if request.auth != null; // TEMPORARY - permissive for debugging
    }

    // ---------- community_posts ----------
    match /community_posts/{postId} {
      // Anyone signed-in can read posts that are flagged public
      allow read: if resource.data.visibility == 'public';

      // Allow create only in the open 'whats-good' community by any signed-in user
      allow create: if request.auth != null &&
        request.resource.data.communityId == 'whats-good';

      // Owner, approved brand manager, or super admin can update / delete
      allow update, delete: if request.auth != null && (
        (resource.data.userId == request.auth.uid) ||
        isApprovedBrandManager(request.auth.uid) ||
        isSuperAdmin(request.auth.uid)
      );
    }

    // ---------- community_comments ----------
    match /community_comments/{commentId} {
      // Readable by any authenticated user (needed for post threads)
      allow read: if request.auth != null;

      // Only the signed-in author may create
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;

      // Author or super admin may edit / delete
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        isSuperAdmin(request.auth.uid)
      );
    }

    // ---------- post_likes (one doc per user+post) ----------
    match /post_likes/{likeId} {
      // Counts require read for signed-in users
      allow read: if request.auth != null;

      // Like/unlike allowed only for the owner
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null &&
        resource.data.userId == request.auth.uid;

      // Likes are immutable otherwise
      allow update: if false;
    }

    // ---------- sample_programs (brand-funded product campaigns) ----------
    // TEMPORARY DEMO SEEDING FIX:
    // Allow any authenticated user full access to sample_programs for seeding.
    // Tighten these rules once seeding is confirmed working.
    match /sample_programs/{programId} {
      allow read, write: if request.auth != null; // TEMPORARY - permissive for debugging
    }

    // ---------- sample_requests (staff request; brand fulfills) ----------
    // TEMPORARY DEMO SEEDING FIX:
    // Allow any authenticated user full access to sample_requests for seeding.
    // Tighten these rules once seeding is confirmed working.
    match /sample_requests/{reqId} {
      allow read, write: if request.auth != null; // TEMPORARY - permissive for debugging
    }

    // ---------- announcements (brand -> staff) ----------
    // TEMPORARY DEMO SEEDING FIX:
    // Allow any authenticated user full access to announcements for seeding.
    // Tighten these rules once seeding is confirmed working.
    match /announcements/{annId} {
      allow read, write: if request.auth != null; // TEMPORARY - permissive for debugging
    }

    // ---------- lessons (brand educational content) ----------
    // TEMPORARY DEMO SEEDING FIX:
    // Allow any authenticated user full access to lessons for seeding.
    // Tighten these rules once seeding is confirmed working.
    match /lessons/{lessonId} {
      allow read, write: if request.auth != null; // TEMPORARY - permissive for debugging
    }

    // ---------- templates ----------
    match /templates/{templateId} {
      // Any signed-in user can read templates
      allow read: if request.auth != null;

      // Only approved brand managers (any brand) or super_admin may create
      allow create: if request.auth != null &&
        (isApprovedBrandManager(request.auth.uid) || isSuperAdmin(request.auth.uid));

      // Same roles can update / delete
      allow update, delete: if request.auth != null &&
        (isApprovedBrandManager(request.auth.uid) || isSuperAdmin(request.auth.uid));
    }

    // ---------- test_permissions (demo seeding helper) ----------
    match /test_permissions/{docId} {
      // Restrict to super_admin so production data stays safe
      allow read, write: if request.auth != null && isSuperAdmin(request.auth.uid);
    }

    // ---------- communities ----------
    match /communities/{communityId} {
      // Only allow read for signed-in users if the community is public & active
      allow read: if request.auth != null &&
        ('isPublic' in resource.data) && resource.data.isPublic == true &&
        ('isActive' in resource.data) && resource.data.isActive == true;

      // No writes from client side
      allow write: if false;
    }

    // ---------- community_likes ----------
    match /community_likes/{likeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow update: if false; // likes are immutable
    }

    // ---------- brand_follows (user follows brands) ----------
    match /brand_follows/{docId} {
      // Create limited to the owner
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Temporarily allow read to any authenticated user so brand managers can list followers
      allow read: if request.auth != null;
      // Owner-only updates/deletes; guard against missing userId field
      allow update, delete: if request.auth != null && ('userId' in resource.data) && resource.data.userId == request.auth.uid;
    }
  }
}
