rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /*
     * ------------------------------------------------------------------
     *  Helper functions – rely exclusively on custom auth **claims**
     *  injected by the emulator/production backend:
     *    role      : 'admin' | 'brand' | ...
     *    brandId   : brand a user manages (for role === 'brand')
     *    admin     : boolean (optional) – legacy flag for admin
     * ------------------------------------------------------------------
     */
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() &&
        (request.auth.token.role == 'admin' || request.auth.token.admin == true);
    }

    function isBrandManager(brandId) {
      return isAuthenticated() &&
        request.auth.token.role == 'brand' &&
        request.auth.token.brandId == brandId;
    }

    // Existing user rules
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // BRANDS COLLECTION RULES
    match /brands/{brandId} {
      // Anyone can read brand info (public brands)
      allow read: if true;
      
      // Brand managers (for their own brand) or admins can write/update/delete
      allow write: if isBrandManager(brandId) || isAdmin();

      // Brand users subcollection - only managers can manage users
      match /users/{userId} {
        allow read, write: if isBrandManager(brandId) || isAdmin();
      }

      // Brand content subcollection
      match /content/{contentId} {
        // Anyone can read published content
        allow read: if resource.data.isPublished == true;
        
        // Brand managers can read all of their brand’s content
        allow read: if isBrandManager(brandId) || isAdmin();
        
        // Only brand managers (for their brand) or admins can create/update/delete
        allow write: if isBrandManager(brandId) || isAdmin();
      }
    }

    // Existing easter eggs rules
    match /easter_eggs/{eggId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.email in ['admin@engagenatural.com', 'your-email@gmail.com'];
    }

    // Existing user easter eggs rules
    match /user_easter_eggs/{userEggId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }

    // Existing communities rules
    match /communities/{communityId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.email in ['admin@engagenatural.com', 'your-email@gmail.com'];
    }

    // Your temporary catch-all rule (expires July 17, 2025)
    // This should be removed before expiration and replaced with specific rules
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 7, 17);
    }
  }
}
