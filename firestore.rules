rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helpers ----------
    function userSnap(uid) {
      return get(/databases/$(database)/documents/users/$(uid));
    }
    function userData(uid) {
      return userSnap(uid).data;
    }
    function isSuperAdmin(uid) {
      return userData(uid).role == 'super_admin';
    }
    function isApprovedBrandManager(uid) {
      let u = userData(uid);
      return u.role == 'brand_manager' && u.approved == true;
    }
    // Check a community post is public by PATH (no NPEs)
    function isPublicPost(path) {
      return exists(path) && get(path).data.visibility == 'public';
    }

    // ---------- users ----------
    match /users/{uid} {
      // read own or (if admin) anyone's
      allow read: if request.auth != null && (uid == request.auth.uid || isSuperAdmin(request.auth.uid));

      // create: self can create; super_admin can create demoSeed users
      allow create: if request.auth != null && (
        uid == request.auth.uid ||
        (isSuperAdmin(request.auth.uid) && request.resource.data.demoSeed == true)
      );

      // update: super_admin can change anything; regular user can't change 'approved'
      allow update: if request.auth != null && (
        isSuperAdmin(request.auth.uid) ||
        (uid == request.auth.uid && request.resource.data.approved == resource.data.approved)
      );

      // delete (optional): super_admin only
      allow delete: if request.auth != null && isSuperAdmin(request.auth.uid);
    }

    // ---------- brands / retailers (reference data) ----------
    match /brands/{brandId} {
      allow read: if request.auth != null;
      // brand docs are typically admin/seeded; allow brand managers or super_admin
      allow create, update, delete: if request.auth != null && (isApprovedBrandManager(request.auth.uid) || isSuperAdmin(request.auth.uid));
    }

    match /retailers/{retailerId} {
      allow read: if request.auth != null;
      // keep admin-managed by default
      allow create, update, delete: if request.auth != null && isSuperAdmin(request.auth.uid);
    }

    // ---------- trainings (brand publishes; staff self-enroll) ----------
    match /trainings/{trainingId} {
      // any authed user may read *published* trainings
      allow read: if request.auth != null && resource.data.published == true;

      // create: approved brand manager (for their brand) or super_admin
      allow create: if request.auth != null && (
        (isApprovedBrandManager(request.auth.uid) &&
         request.resource.data.authorUid == request.auth.uid &&
         request.resource.data.brandId == userData(request.auth.uid).brandId) ||
        isSuperAdmin(request.auth.uid)
      );

      // update/delete: author brand_manager or super_admin
      allow update, delete: if request.auth != null && (
        (isApprovedBrandManager(request.auth.uid) && resource.data.authorUid == request.auth.uid) ||
        isSuperAdmin(request.auth.uid)
      );
    }

    // ---------- training_progress (per-user enrollment/progress) ----------
    match /training_progress/{progId} {
      // owner only
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // ---------- community posts / comments / likes ----------
    match /community_posts/{postId} {
      // read public posts
      allow read: if request.auth != null && resource.data.visibility == 'public';

      // create: approved brand manager for their brand (or super_admin)
      allow create: if request.auth != null && (
        (isApprovedBrandManager(request.auth.uid) &&
         request.resource.data.authorUid == request.auth.uid &&
         request.resource.data.brandId == userData(request.auth.uid).brandId) ||
        isSuperAdmin(request.auth.uid)
      );

      // update/delete: author (approved brand_manager) or super_admin
      allow update, delete: if request.auth != null && (
        (isApprovedBrandManager(request.auth.uid) && resource.data.authorUid == request.auth.uid) ||
        isSuperAdmin(request.auth.uid)
      );
      // NOTE: Staff are NOT allowed to update post counters. Compute counts from subcollections.
    }

    match /community_comments/{commentId} {
      // read only if parent post is public
      allow read: if request.auth != null &&
        isPublicPost(/databases/$(database)/documents/community_posts/$(resource.data.postId));

      // create only if parent is public
      allow create: if request.auth != null &&
        isPublicPost(/databases/$(database)/documents/community_posts/$(request.resource.data.postId));

      // edit/delete own comments or super_admin
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || isSuperAdmin(request.auth.uid)
      );
    }

    match /post_likes/{likeId} {
      // one doc per user+post; owner controls it
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow update: if false;
    }

    // ---------- sample programs / requests ----------
    match /sample_programs/{programId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (
        (isApprovedBrandManager(request.auth.uid) &&
         request.resource.data.createdBy == request.auth.uid &&
         request.resource.data.brandId == userData(request.auth.uid).brandId) ||
        isSuperAdmin(request.auth.uid)
      );
      allow update, delete: if request.auth != null && (
        (isApprovedBrandManager(request.auth.uid) && resource.data.createdBy == request.auth.uid) ||
        isSuperAdmin(request.auth.uid)
      );
    }

    match /sample_requests/{reqId} {
      // staff owner OR brand manager of same brand OR super_admin
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        (isApprovedBrandManager(request.auth.uid) && resource.data.brandId == userData(request.auth.uid).brandId) ||
        isSuperAdmin(request.auth.uid)
      );

      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        (isApprovedBrandManager(request.auth.uid) && resource.data.brandId == userData(request.auth.uid).brandId) ||
        isSuperAdmin(request.auth.uid)
      );

      allow delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || isSuperAdmin(request.auth.uid)
      );
    }

    // ---------- announcements (brand -> staff) ----------
    match /announcements/{annId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (
        (isApprovedBrandManager(request.auth.uid) &&
         request.resource.data.createdBy == request.auth.uid &&
         request.resource.data.brandId == userData(request.auth.uid).brandId) ||
        isSuperAdmin(request.auth.uid)
      );
      allow update, delete: if request.auth != null && (
        (isApprovedBrandManager(request.auth.uid) && resource.data.createdBy == request.auth.uid) ||
        isSuperAdmin(request.auth.uid)
      );
    }
  }
}
