{"version":3,"mappings":";kMAsBA,SAAwBA,IAAa,CACnC,KAAM,CAAE,OAAAC,CAAA,EAAWC,EAAA,EACbC,EAAWC,EAAA,EACXC,EAAaC,SAAO,IAAI,EAExB,CAACC,EAASC,CAAU,EAAIC,WAAS,EAAI,EACrC,CAACC,EAAMC,CAAO,EAAIF,WAAS,IAAI,EAC/B,CAACG,EAASC,CAAU,EAAIJ,WAAS,EAAE,EACnC,CAACK,EAAOC,CAAQ,EAAIN,WAAS,EAAK,EAClC,CAACO,EAAUC,CAAW,EAAIR,WAAS,EAAE,EACrC,CAACS,EAAYC,CAAa,EAAIV,WAAS,EAAE,EACzC,CAACW,EAAWC,CAAY,EAAIZ,WAAS,EAAE,EAEvC,CAAE,KAAAa,CAAA,EAASC,EAAA,EAGjBC,YAAU,IAAM,CACV,CAACjB,GAAWG,GAAQL,EAAW,SACjCA,EAAW,QAAQ,OAEvB,EAAG,CAACE,EAASG,CAAI,CAAC,EAGlBc,YAAU,IAAM,CACd,IAAIC,EAAY,GAChB,eAAeC,GAAO,CACpBlB,EAAW,EAAI,EACf,GAAI,CACF,IAAImB,EAAa,KACbC,EAAW,UAGf,MAAMC,EAAKC,GAAiB,KAAMC,GAAMA,EAAE,KAAO9B,CAAM,EACjD+B,EAAMH,EAA8C,KAAzCI,GAAU,KAAMF,GAAMA,EAAE,KAAO9B,CAAM,EAChDiC,EAAOL,GAAMG,GAAM,KAEzB,GAAIE,EACFP,EAAa,CACX,GAAIO,EAAK,GACT,MAAOA,EAAK,OAAS,UACrB,MAAOA,EAAK,OAAS,SACrB,QAASA,EAAK,SAAWA,EAAK,SAAW,GACzC,QAASA,EAAK,SAAWA,EAAK,SAAW,GACzC,UAAWA,EAAK,WAAa,KAC7B,QAASA,EAAK,SAAW,GACzB,WAAYA,EAAK,YAAc,KAC/B,QAAS,GACT,WAAY,EAAC,EAEfN,EAAWC,EAAK,YAAc,UACzB,CAEL,MAAMM,EAAMC,EAAIC,EAAI,kBAAmBpC,CAAM,EACvCqC,EAAO,MAAMC,EAAOJ,CAAG,EAC7B,GAAIG,EAAK,SAAU,CACjB,MAAME,EAAOF,EAAK,OAClBX,EAAa,CACX,GAAIW,EAAK,GACT,MAAOE,EAAK,OAASA,EAAK,eAAiB,UAC3C,MAAOA,EAAK,OAAS,SACrB,QAASA,EAAK,MAAQ,GACtB,QAASA,EAAK,MAAQ,GACtB,UAAWA,EAAK,WAAa,KAC7B,WAAYA,EAAK,YAAc,KAC/B,QAAS,GACT,WAAY,EAAC,EAEfZ,EAAW,SACb,CACF,CAGA,GAAID,GAAc,CAACF,EACjBd,EAAQgB,CAAU,EAClBc,GAAS,CAAE,OAAQd,EAAW,GAAI,SAAAC,EAAU,UACnC,CAACH,EAAW,CACrBd,EAAQ,IAAI,EACZH,EAAW,EAAK,EAChB,MACF,CAGA,GAAI6B,GAAM,CAACZ,EACT,GAAI,CACF,MAAMiB,EAASC,EAAMC,EAAWP,EAAI,YAAY,EAAGQ,EAAM,SAAU,KAAM5C,CAAM,CAAC,EAC1E6C,EAAYH,EAAMC,EAAWP,EAAI,oBAAoB,EAAGQ,EAAM,SAAU,KAAM5C,CAAM,CAAC,EACrF,CAAC8C,EAAWC,EAAY,EAAI,MAAM,QAAQ,IAAI,CAClDC,EAAmBP,CAAM,EACzBO,EAAmBH,CAAS,EAC7B,EAED,GAAI,CAACrB,EAAW,CACd,MAAMyB,EAAYH,EAAU,OAAO,OAAS,EAE5ClC,EAAW,MAAM,KAAK,CAAE,OAAQqC,CAAA,EAAa,CAAC,EAAGC,IAAM,IAAIA,CAAC,EAAE,CAAC,CACjE,CAEA,MAAMC,EAAUT,EACdC,EAAWP,EAAI,oBAAoB,EACnCQ,EAAM,SAAU,KAAM5C,CAAM,EAC5BoD,GAAQ,YAAa,KAAK,GAEtBC,EAAa,MAAMC,GAAQH,CAAO,EACnC3B,GACHR,EAAYqC,EAAW,KAAK,IAAKE,IAAO,CAAE,GAAIA,EAAE,GAAI,OAAQ,KAAM,GAAGA,EAAE,MAAK,EAAI,CAAC,EAInF,GAAI,CACF,GAAIlC,GAAA,MAAAA,EAAM,IAAK,CACb,MAAMmC,EAAUrB,EAAIC,EAAI,aAAc,GAAGpC,CAAM,IAAIqB,EAAK,GAAG,EAAE,EACvDoC,EAAU,MAAMnB,EAAOkB,CAAO,EAC/BhC,IACHV,EAAS2C,EAAQ,QAAQ,EAEzB7C,EAAY8C,GAAS,CACnB,MAAMC,EAAQD,EAAK,SAAS,IAAI,EAChC,OAAID,EAAQ,UAAY,CAACE,EAAc,CAAC,GAAGD,EAAM,IAAI,EACjD,CAACD,EAAQ,UAAYE,EAAcD,EAAK,OAAQE,GAAMA,IAAM,IAAI,EAC7DF,CACT,CAAC,EAEL,CACF,OAASG,EAAK,CACZ,QAAQ,KAAK,sCAAuCA,CAAG,CACzD,CACF,OAASA,EAAK,CACZ,QAAQ,KAAK,gDAAiDA,CAAG,EAE5DrC,IACHZ,EAAW,EAAE,EACbI,EAAY,EAAE,EACdF,EAAS,EAAK,EAElB,CAEJ,MAAY,CACLU,GACHd,EAAQ,IAAI,CAEhB,SACOc,GAAWjB,EAAW,EAAK,CAClC,CACF,CACA,OAAAkB,EAAA,EACO,IAAM,CACXD,EAAY,EACd,CACF,EAAG,CAACxB,CAAM,CAAC,EAGXuB,YAAU,IAAM,CACd,IAAIC,EAAY,GAChB,eAAesC,GAAe,CAC5B,GAAK9D,EAEL,IAAI,EAACqB,GAAA,MAAAA,EAAM,KAAK,CACdP,EAAS,EAAK,EACdF,EAAY8C,GAAUA,EAAK,SAAS,IAAI,EAAIA,EAAK,OAAQE,GAAMA,IAAM,IAAI,EAAIF,CAAK,EAClF,MACF,CACA,GAAI,CACF,MAAMF,EAAUrB,EAAIC,EAAI,aAAc,GAAGpC,CAAM,IAAIqB,EAAK,GAAG,EAAE,EACvDoC,EAAU,MAAMnB,EAAOkB,CAAO,EACpC,GAAIhC,EAAW,OACfV,EAAS2C,EAAQ,QAAQ,EACzB7C,EAAY8C,GAAS,CACnB,MAAMC,EAAQD,EAAK,SAAS,IAAI,EAChC,OAAID,EAAQ,UAAY,CAACE,EAAc,CAAC,GAAGD,EAAM,IAAI,EACjD,CAACD,EAAQ,UAAYE,EAAcD,EAAK,OAAQE,GAAMA,IAAM,IAAI,EAC7DF,CACT,CAAC,CACH,MAAQ,CAAC,EACX,CACA,OAAAI,EAAA,EACO,IAAM,CACXtC,EAAY,EACd,CACF,EAAG,CAACH,GAAA,YAAAA,EAAM,IAAKrB,CAAM,CAAC,EAEtB,MAAM+D,EAAa,SAAY,CAC7B,GAAI,CAACtD,EAAM,OACXW,EAAa,EAAE,EAGf,MAAM4C,EAAe,CAACnD,EAEtBC,EAAU4C,GAAS,CACjB,MAAMO,EAAO,CAACP,EACdQ,UAAkB,CAAE,OAAQzD,EAAK,GAAI,MAAOwD,EAAM,EAC3CA,CACT,CAAC,EAGDrD,EAAY8C,GAAS,CACnB,MAAMC,EAAQD,EAAK,SAAS,IAAI,EAChC,OAAIM,EAEKL,EAAQD,EAAO,CAAC,GAAGA,EAAM,IAAI,EAG/BC,EAAQD,EAAK,OAAQE,GAAMA,IAAM,IAAI,EAAIF,CAClD,CAAC,EAGD,GAAI,CACF,GAAItB,IAAMf,GAAA,MAAAA,EAAM,KAAK,CACnB,MAAMmC,EAAUrB,EAAIC,EAAI,aAAc,GAAG3B,EAAK,EAAE,IAAIY,EAAK,GAAG,EAAE,EAE9D,IADgB,MAAMiB,EAAOkB,CAAO,GACxB,UAEV,GAAI,CAACQ,EAAc,CACjB,KAAM,CAAE,UAAAG,CAAA,EAAc,MAAAC,EAAA,0BAAAD,GAAA,KAAM,QAAO,qBAAoB,OAAAE,KAAA,oBAAAF,CAAA,2BACvD,MAAMA,EAAUX,CAAO,CACzB,UAGIQ,EAAc,CAChB,KAAM,CAAE,OAAAM,EAAQ,gBAAAC,GAAoB,MAAAH,EAAA,uBAAAE,EAAA,gBAAAC,CAAA,OAAM,QAAO,qBAAoB,OAAAF,KAAA,iBAAAC,EAAA,gBAAAC,CAAA,2BACrE,MAAMD,EAAOd,EAAS,CAAE,OAAQ/C,EAAK,GAAI,OAAQY,EAAK,IAAK,UAAWkD,EAAA,CAAgB,CAAG,CAC3F,CAEJ,CACF,MAAY,CAEVzD,EAAU4C,GAAS,CAACA,CAAI,EACxB9C,EAAY8C,GAAS,CACnB,MAAMC,EAAQD,EAAK,SAAS,IAAI,EAEhC,OAAIM,EAEKL,EAAQD,EAAK,OAAQE,GAAMA,IAAM,IAAI,EAAIF,EAGzCC,EAAQD,EAAO,CAAC,GAAGA,EAAM,IAAI,CAExC,CAAC,EACDtC,EAAaoD,EAAK,OAAO,OAAO,CAClC,CACF,EAEMC,EAAmB,SAAY,CACnC,MAAMC,EAAOzD,EAAW,OACxB,GAAI,CAACyD,EAAM,OACXC,GAAqB,CAAE,OAAQlE,EAAK,GAAI,OAAQiE,EAAK,OAAQ,EAE7D,MAAME,MAAU,KACVC,EAAa,CACjB,GAAI,SAASD,EAAI,SAAS,GAC1B,KAAAF,EACA,UAAWE,EACX,SAAU,MACV,OAAQ,WAIV,GAFA5D,EAAa0C,GAAS,CAAC,GAAGA,EAAMmB,CAAU,CAAC,EAC3C3D,EAAc,EAAE,EACZ,CAACkB,GAAM,EAACf,GAAA,MAAAA,EAAM,KAAK,CAErBL,EAAa0C,GAASA,EAAK,IAAKoB,GAAOA,EAAE,KAAOD,EAAW,GAAK,CAAE,GAAGC,EAAG,OAAQ,MAASA,CAAE,CAAC,EAC5F,MACF,CACA,GAAI,CACF,KAAM,CAAE,OAAAC,EAAQ,gBAAAR,GAAoB,MAAAH,EAAA,uBAAAW,EAAA,gBAAAR,CAAA,OAAM,QAAO,qBAAoB,OAAAF,KAAA,iBAAAU,EAAA,gBAAAR,CAAA,2BAC/DrC,EAAM,MAAM6C,EAAOpC,EAAWP,EAAI,oBAAoB,EAAG,CAC7D,OAAQ3B,EAAK,GACb,YAAaA,EAAK,aAAe,aACjC,QAASA,EAAK,SAAW,KACzB,OAAQY,EAAK,IACb,SAAUA,EAAK,MAAQ,OACvB,KAAAqD,EACA,UAAWH,EAAA,CAAgB,CAC5B,EACDvD,EAAa0C,GAASA,EAAK,IAAK,GAAO,EAAE,KAAOmB,EAAW,GAAK,CAAE,GAAG,EAAG,GAAI3C,EAAI,GAAI,OAAQ,MAAS,CAAE,CAAC,EAGxG,WAAW,IAAM,CACX,OAAO,OAAO,0BAA6B,YAC7C,QAAQ,IAAI,qCAAsCzB,EAAK,EAAE,EACzD,OAAO,yBAAyBA,EAAK,EAAE,GAEvC,QAAQ,KAAK,+CAA+C,CAEhE,EAAG,GAAI,CACT,MAAY,CACVO,EAAa0C,GAASA,EAAK,IAAKoB,GAAOA,EAAE,KAAOD,EAAW,GAAK,CAAE,GAAGC,EAAG,OAAQ,SAAYA,CAAE,CAAC,CACjG,CACF,EAEME,EAAmB,MAAOC,GAAQ,CACtC,GAAI,GAACA,GAAOA,EAAI,SAAW,SAC3B,CAAAjE,EAAa0C,GAASA,EAAK,IAAKoB,GAAOA,EAAE,KAAOG,EAAI,GAAK,CAAE,GAAGH,EAAG,OAAQ,WAAcA,CAAE,CAAC,EAC1F,GAAI,CACF,KAAM,CAAE,OAAAC,EAAQ,gBAAAR,GAAoB,MAAAH,EAAA,uBAAAW,EAAA,gBAAAR,CAAA,OAAM,QAAO,qBAAoB,OAAAF,KAAA,iBAAAU,EAAA,gBAAAR,CAAA,2BAC/DrC,EAAM,MAAM6C,EAAOpC,EAAWP,EAAI,oBAAoB,EAAG,CAC7D,OAAQ3B,EAAK,GACb,YAAaA,EAAK,aAAe,aACjC,QAASA,EAAK,SAAW,KACzB,OAAQY,EAAK,IACb,SAAUA,EAAK,MAAQ,OACvB,KAAM4D,EAAI,KACV,UAAWV,EAAA,CAAgB,CAC5B,EACDvD,EAAa0C,GAASA,EAAK,IAAKoB,GAAOA,EAAE,KAAOG,EAAI,GAAK,CAAE,GAAGH,EAAG,GAAI5C,EAAI,GAAI,OAAQ,MAAS4C,CAAE,CAAC,CACnG,MAAY,CACV9D,EAAa0C,GAASA,EAAK,IAAKoB,GAAOA,EAAE,KAAOG,EAAI,GAAK,CAAE,GAAGH,EAAG,OAAQ,SAAYA,CAAE,CAAC,CAC1F,EACF,EAEA,GAAIxE,EACF,OACE4E,OAAC,OAAI,UAAU,8BACb,UAAAC,MAAC,OAAI,UAAU,6CAA6C,EAC5DD,OAAC,OAAI,UAAU,sDACb,UAAAC,MAAC,OAAI,UAAU,qCAAqC,EACpDA,MAAC,OAAI,UAAU,sCAAsC,EACrDA,MAAC,OAAI,UAAU,gCAAgC,GACjD,GACF,EAIJ,GAAI,CAAC1E,EACH,OACEyE,OAAC,OAAI,UAAU,wCACb,UAAAC,MAAC,UACC,QAAS,IAAMjF,EAAS,kBAAkB,EAC1C,UAAU,4CACX,iCAGDiF,MAAC,OAAI,UAAU,2EAA2E,2BAE1F,GACF,EAIJ,MAAMC,EAAW3E,EAAK,SAAW,GAEjC,OACEyE,OAAC,OAAI,UAAU,4BACb,UAAAA,OAAC,OAAI,UAAU,8BACb,UAAAC,MAAC,UACC,QAAS,IAAMjF,EAAS,EAAE,EAC1B,UAAU,4CACV,aAAW,UACZ,oBAIDgF,OAAC,WAAQ,UAAU,sDACjB,UAAAA,OAAC,UAAO,UAAU,yCAChB,UAAAC,MAAC,OAAI,UAAU,0BACb,SAAAA,MAAC,QAAK,UAAU,qIACb,SAAA1E,EAAK,OAAS,UACjB,EACF,EACC2E,GACCD,MAAC,QAAK,UAAU,yBAA0B,SAAAC,CAAA,CAAS,GAEvD,EAEAD,MAAC,MACC,IAAK/E,EACL,SAAU,GACV,UAAU,2CAET,WAAK,OAAS,WAGhBK,EAAK,SACJ0E,MAAC,OAAI,UAAU,yCAA0C,WAAK,QAAQ,EAGvE1E,EAAK,YACJyE,OAAC,WAAQ,UAAU,qCACjB,UAAAC,MAAC,MAAG,UAAU,oCAAoC,4BAAgB,EAClEA,MAAC,UACC,KAAK,SACL,QAAS,IAAM,CAAEE,EAAiB,CAAE,OAAQ5E,EAAK,GAAI,WAAYA,EAAK,WAAY,EAAGP,EAAS,oBAAoBO,EAAK,UAAU,EAAE,CAAG,EACtI,UAAU,mJACV,aAAW,wBAEV,WAAK,QAAQ,cAChB,EACF,EAGFyE,OAAC,UAAO,UAAU,+BAChB,UAAAA,OAAC,UACC,KAAK,SACL,QAASnB,EACT,UAAW,0LACTlD,EAAQ,2CAA6C,gDACvD,GACA,eAAcA,EAAQ,OAAS,QAC/B,aAAYA,EAAQ,gBAAgBF,EAAQ,MAAM,UAAY,cAAcA,EAAQ,MAAM,UAC1F,cAAY,cAEZ,UAAAwE,MAAC,QAAK,UAAU,OAAO,cAAW,GAC/B,SAAAtE,EAAQ,KAAO,KAClB,EACAsE,MAAC,QAAM,SAAAX,EAAK,QAAQ,KAAK,EACzBW,MAAC,QAAK,UAAU,qBAAsB,WAAQ,OAAO,KAEtDhE,GACCgE,MAAC,QAAK,UAAU,uBAAwB,SAAAhE,EAAU,EAGpD+D,OAAC,KACC,KAAK,WACL,UAAU,sNACV,aAAY,qBAAqBnE,EAAS,MAAM,aAEhD,UAAAoE,MAAC,QAAK,UAAU,OAAO,cAAW,GAAC,cAAE,EACrCA,MAAC,QAAM,SAAAX,EAAK,QAAQ,QAAQ,EAC5BW,MAAC,QAAK,UAAU,qBAAsB,WAAS,OAAO,IACxD,EACF,GACF,EAGAD,OAAC,WAAQ,GAAG,WAAW,UAAU,OAC/B,UAAAC,MAAC,MAAG,UAAU,UAAU,oBAAQ,EAC/BpE,EAAS,SAAW,EACnBoE,MAAC,OAAI,UAAU,yBAAyB,4BAAgB,EAExDA,MAAC,MAAG,UAAU,YACX,WAAS,IAAKL,UACbI,cAAC,MAAc,UAAU,iDACvB,UAAAA,OAAC,OAAI,UAAU,0DACb,UAAAC,MAAC,QAAM,SAAAL,EAAE,UAAY,OAAO,EAC5BK,MAAC,QACE,iBAAOG,EAAAR,EAAE,YAAF,YAAAQ,EAAa,SAAW,WAC5BR,EAAE,UAAU,SAAS,iBACpBA,EAAE,qBAAqB,KAAOA,EAAE,UAAU,iBAAmB,WACpE,GACF,EACAK,MAAC,KAAE,UAAU,6BAA8B,WAAE,KAAK,EACjDL,EAAE,SAAW,SACZI,OAAC,OAAI,UAAU,oDACb,UAAAC,MAAC,QAAM,SAAAX,EAAK,OAAO,QAAQ,EACnCW,MAAC,UACS,KAAK,SACL,QAAS,IAAMH,EAAiBF,CAAC,EACzC,UAAU,+NACH,kBAED,EACF,EAEDA,EAAE,SAAW,iBACX,OAAI,UAAU,6BAA6B,oBAAQ,IAvB/CA,EAAE,EAyBX,EACD,EACH,GAEJ,GACF,QAGC,OAAI,UAAU,8DACb,SAAAI,OAAC,OAAI,UAAU,sDACb,UAAAC,MAAC,SACC,GAAG,UACH,KAAK,OACL,MAAOlE,EACP,SAAWsE,GAAMrE,EAAcqE,EAAE,OAAO,KAAK,EAC7C,YAAY,iBACZ,aAAW,gBACX,UAAU,+EACV,cAAY,kBAEdJ,MAAC,UACC,KAAK,SACL,QAASV,EACT,UAAU,2GACV,SAAU,CAACxD,EAAW,OACtB,cAAY,iBACb,iBAED,EACF,EACF,GACF,CAEJ","names":["PostDetail","postId","useParams","navigate","useNavigate","headingRef","useRef","loading","setLoading","useState","post","setPost","likeIds","setLikeIds","liked","setLiked","comments","setComments","newComment","setNewComment","likeError","setLikeError","user","useAuth","useEffect","cancelled","load","mappedPost","feedType","wg","WHATS_GOOD_STUBS","p","pr","PRO_STUBS","stub","ref","doc","db","snap","getDoc","data","postOpen","likesQ","query","collection","where","commentsQ","likesSnap","commentsSnap","getCountFromServer","likeCount","i","recentQ","orderBy","recentSnap","getDocs","d","likeRef","likeDoc","prev","hasMe","v","err","refreshLiked","handleLike","intendedNext","next","analyticsPostLike","deleteDoc","__vitePreload","n","setDoc","serverTimestamp","COPY","handleAddComment","text","analyticsPostComment","now","optimistic","c","addDoc","retrySendComment","cmt","jsxs","jsx","timeText","postOpenTraining","_a","e"],"ignoreList":[],"sources":["../../src/pages/PostDetail.jsx"],"sourcesContent":["// src/pages/PostDetail.jsx\r\nimport { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { WHATS_GOOD_STUBS } from '../components/community/WhatsGoodFeed';\r\nimport { PRO_STUBS } from '../components/community/ProFeed';\r\nimport { db } from '../lib/firebase';\r\nimport { useAuth } from '../contexts/auth-context';\r\nimport SkeletonDetail from '../components/community/SkeletonDetail';\r\nimport ErrorBanner from '../components/community/ErrorBanner';\r\nimport { postOpen, postLike as analyticsPostLike, postComment as analyticsPostComment, postOpenTraining } from '../lib/analytics';\r\nimport COPY from '../i18n/community.copy';\r\nimport {\r\n  collection,\r\n  doc,\r\n  getDoc,\r\n  getDocs,\r\n  getCountFromServer,\r\n  orderBy,\r\n  query,\r\n  where,\r\n} from 'firebase/firestore';\r\n\r\nexport default function PostDetail() {\r\n  const { postId } = useParams();\r\n  const navigate = useNavigate();\r\n  const headingRef = useRef(null);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [post, setPost] = useState(null);\r\n  const [likeIds, setLikeIds] = useState([]); // derive counts from arrays\r\n  const [liked, setLiked] = useState(false);\r\n  const [comments, setComments] = useState([]); // [{id,text,createdAt,status?:'pending'|'error'|'ok'}]\r\n  const [newComment, setNewComment] = useState('');\r\n  const [likeError, setLikeError] = useState('');\r\n\r\n  const { user } = useAuth();\r\n\r\n  // Focus the heading after content is loaded and rendered\r\n  useEffect(() => {\r\n    if (!loading && post && headingRef.current) {\r\n      headingRef.current.focus();\r\n    }\r\n  }, [loading, post]);\r\n\r\n  // initial load\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    async function load() {\r\n      setLoading(true);\r\n      try {\r\n        let mappedPost = null;\r\n        let feedType = 'unknown';\r\n        \r\n        // Try to find in stub data first\r\n        const wg = WHATS_GOOD_STUBS.find((p) => p.id === postId);\r\n        const pr = !wg ? PRO_STUBS.find((p) => p.id === postId) : null;\r\n        const stub = wg || pr || null;\r\n        \r\n        if (stub) {\r\n          mappedPost = {\r\n            id: stub.id,\r\n            brand: stub.brand || 'General',\r\n            title: stub.title || 'Update',\r\n            snippet: stub.snippet || stub.content || '',\r\n            content: stub.content || stub.snippet || '',\r\n            createdAt: stub.createdAt || null,\r\n            timeAgo: stub.timeAgo || '',\r\n            trainingId: stub.trainingId || null,\r\n            likeIds: [],\r\n            commentIds: [],\r\n          };\r\n          feedType = wg ? 'whatsGood' : 'pro';\r\n        } else {\r\n          // Try Firestore lookup\r\n          const ref = doc(db, 'community_posts', postId);\r\n          const snap = await getDoc(ref);\r\n          if (snap.exists()) {\r\n            const data = snap.data();\r\n            mappedPost = {\r\n              id: snap.id,\r\n              brand: data.brand || data.communityName || 'General',\r\n              title: data.title || 'Update',\r\n              snippet: data.body || '',\r\n              content: data.body || '',\r\n              createdAt: data.createdAt || null,\r\n              trainingId: data.trainingId || null,\r\n              likeIds: [],\r\n              commentIds: [],\r\n            };\r\n            feedType = 'unknown';\r\n          }\r\n        }\r\n\r\n        // Set the post if we found it (either stub or Firestore)\r\n        if (mappedPost && !cancelled) {\r\n          setPost(mappedPost);\r\n          postOpen({ postId: mappedPost.id, feedType });\r\n        } else if (!cancelled) {\r\n          setPost(null);\r\n          setLoading(false);\r\n          return; // Exit early if no post found\r\n        }\r\n\r\n        // ALWAYS load likes and comments from Firestore (for both stub and real posts)\r\n        if (db && !cancelled) {\r\n          try {\r\n            const likesQ = query(collection(db, 'post_likes'), where('postId', '==', postId));\r\n            const commentsQ = query(collection(db, 'community_comments'), where('postId', '==', postId));\r\n            const [likesSnap, commentsSnap] = await Promise.all([\r\n              getCountFromServer(likesQ),\r\n              getCountFromServer(commentsQ),\r\n            ]);\r\n            \r\n            if (!cancelled) {\r\n              const likeCount = likesSnap.data().count || 0;\r\n              // Initialize likeIds as placeholders to derive count; ensure 'me' present if likedByMe resolves true later\r\n              setLikeIds(Array.from({ length: likeCount }, (_, i) => `x${i}`));\r\n            }\r\n\r\n            const recentQ = query(\r\n              collection(db, 'community_comments'),\r\n              where('postId', '==', postId),\r\n              orderBy('createdAt', 'asc')\r\n            );\r\n            const recentSnap = await getDocs(recentQ);\r\n            if (!cancelled) {\r\n              setComments(recentSnap.docs.map((d) => ({ id: d.id, status: 'ok', ...d.data() })));\r\n            }\r\n\r\n            // Determine if current user liked this post already\r\n            try {\r\n              if (user?.uid) {\r\n                const likeRef = doc(db, 'post_likes', `${postId}_${user.uid}`);\r\n                const likeDoc = await getDoc(likeRef);\r\n                if (!cancelled) {\r\n                  setLiked(likeDoc.exists());\r\n                  // Ensure local likeIds includes 'me' token when liked\r\n                  setLikeIds((prev) => {\r\n                    const hasMe = prev.includes('me');\r\n                    if (likeDoc.exists() && !hasMe) return [...prev, 'me'];\r\n                    if (!likeDoc.exists() && hasMe) return prev.filter((v) => v !== 'me');\r\n                    return prev;\r\n                  });\r\n                }\r\n              }\r\n            } catch (err) {\r\n              console.warn('Failed to check if user liked post:', err);\r\n            }\r\n          } catch (err) {\r\n            console.warn('Failed to load comments/likes from Firestore:', err);\r\n            // Initialize empty arrays if Firestore fails\r\n            if (!cancelled) {\r\n              setLikeIds([]);\r\n              setComments([]);\r\n              setLiked(false);\r\n            }\r\n          }\r\n        }\r\n      } catch (e) {\r\n        if (!cancelled) {\r\n          setPost(null);\r\n        }\r\n      } finally {\r\n        if (!cancelled) setLoading(false);\r\n      }\r\n    }\r\n    load();\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, [postId]);\r\n\r\n  // Keep liked marker in sync with auth changes\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    async function refreshLiked() {\r\n      if (!postId) return;\r\n      // On logout, clear liked state immediately\r\n      if (!user?.uid) {\r\n        setLiked(false);\r\n        setLikeIds((prev) => (prev.includes('me') ? prev.filter((v) => v !== 'me') : prev));\r\n        return;\r\n      }\r\n      try {\r\n        const likeRef = doc(db, 'post_likes', `${postId}_${user.uid}`);\r\n        const likeDoc = await getDoc(likeRef);\r\n        if (cancelled) return;\r\n        setLiked(likeDoc.exists());\r\n        setLikeIds((prev) => {\r\n          const hasMe = prev.includes('me');\r\n          if (likeDoc.exists() && !hasMe) return [...prev, 'me'];\r\n          if (!likeDoc.exists() && hasMe) return prev.filter((v) => v !== 'me');\r\n          return prev;\r\n        });\r\n      } catch {}\r\n    }\r\n    refreshLiked();\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, [user?.uid, postId]);\r\n\r\n  const handleLike = async () => {\r\n    if (!post) return;\r\n    setLikeError('');\r\n\r\n    // Derive nextLiked from previous state (race-safe)\r\n    const intendedNext = !liked; // used only for server intent and error revert\r\n\r\n    setLiked((prev) => {\r\n      const next = !prev;\r\n      analyticsPostLike({ postId: post.id, liked: next });\r\n      return next;\r\n    });\r\n\r\n    // Update likeIds using intendedNext (single source of truth)\r\n    setLikeIds((prev) => {\r\n      const hasMe = prev.includes('me');\r\n      if (intendedNext) {\r\n        // ensure presence\r\n        return hasMe ? prev : [...prev, 'me'];\r\n      }\r\n      // ensure removal\r\n      return hasMe ? prev.filter((v) => v !== 'me') : prev;\r\n    });\r\n\r\n    // Persist via Firestore if available; revert on failure\r\n    try {\r\n      if (db && user?.uid) {\r\n        const likeRef = doc(db, 'post_likes', `${post.id}_${user.uid}`);\r\n        const likeDoc = await getDoc(likeRef);\r\n        if (likeDoc.exists()) {\r\n          // currently liked on server\r\n          if (!intendedNext) {\r\n            const { deleteDoc } = await import('firebase/firestore');\r\n            await deleteDoc(likeRef);\r\n          }\r\n        } else {\r\n          // not liked on server\r\n          if (intendedNext) {\r\n            const { setDoc, serverTimestamp } = await import('firebase/firestore');\r\n            await setDoc(likeRef, { postId: post.id, userId: user.uid, createdAt: serverTimestamp() });\r\n          }\r\n        }\r\n      }\r\n    } catch (e) {\r\n      // Revert and show error\r\n      setLiked((prev) => !prev); // undo last toggle\r\n      setLikeIds((prev) => {\r\n        const hasMe = prev.includes('me');\r\n        // Revert opposite of intended\r\n        if (intendedNext) {\r\n          // we tried to like → ensure removal\r\n          return hasMe ? prev.filter((v) => v !== 'me') : prev;\r\n        } else {\r\n          // we tried to unlike → ensure add\r\n          return hasMe ? prev : [...prev, 'me'];\r\n        }\r\n      });\r\n      setLikeError(COPY.errors.generic);\r\n    }\r\n  };\r\n\r\n  const handleAddComment = async () => {\r\n    const text = newComment.trim();\r\n    if (!text) return;\r\n    analyticsPostComment({ postId: post.id, length: text.length });\r\n    // Optimistic add; replace on success, mark error on failure\r\n    const now = new Date();\r\n    const optimistic = {\r\n      id: `local-${now.getTime()}`,\r\n      text,\r\n      createdAt: now,\r\n      userRole: 'you',\r\n      status: 'pending',\r\n    };\r\n    setComments((prev) => [...prev, optimistic]);\r\n    setNewComment('');\r\n    if (!db || !user?.uid) {\r\n      // no backend available → mark as ok\r\n      setComments((prev) => prev.map((c) => (c.id === optimistic.id ? { ...c, status: 'ok' } : c)));\r\n      return;\r\n    }\r\n    try {\r\n      const { addDoc, serverTimestamp } = await import('firebase/firestore');\r\n      const ref = await addDoc(collection(db, 'community_comments'), {\r\n        postId: post.id,\r\n        communityId: post.communityId || 'whats-good',\r\n        brandId: post.brandId || null,\r\n        userId: user.uid,\r\n        userRole: user.role || 'user',\r\n        text,\r\n        createdAt: serverTimestamp(),\r\n      });\r\n      setComments((prev) => prev.map((c) => (c.id === optimistic.id ? { ...c, id: ref.id, status: 'ok' } : c)));\r\n      \r\n      // Refresh comment count in community feed with delay for Firestore consistency\r\n      setTimeout(() => {\r\n        if (typeof window.refreshWhatsGoodComments === 'function') {\r\n          console.log('Refreshing comment count for post:', post.id);\r\n          window.refreshWhatsGoodComments(post.id);\r\n        } else {\r\n          console.warn('window.refreshWhatsGoodComments not available');\r\n        }\r\n      }, 1000); // 1 second delay to allow Firestore to propagate\r\n    } catch (e) {\r\n      setComments((prev) => prev.map((c) => (c.id === optimistic.id ? { ...c, status: 'error' } : c)));\r\n    }\r\n  };\r\n\r\n  const retrySendComment = async (cmt) => {\r\n    if (!cmt || cmt.status !== 'error') return;\r\n    setComments((prev) => prev.map((c) => (c.id === cmt.id ? { ...c, status: 'pending' } : c)));\r\n    try {\r\n      const { addDoc, serverTimestamp } = await import('firebase/firestore');\r\n      const ref = await addDoc(collection(db, 'community_comments'), {\r\n        postId: post.id,\r\n        communityId: post.communityId || 'whats-good',\r\n        brandId: post.brandId || null,\r\n        userId: user.uid,\r\n        userRole: user.role || 'user',\r\n        text: cmt.text,\r\n        createdAt: serverTimestamp(),\r\n      });\r\n      setComments((prev) => prev.map((c) => (c.id === cmt.id ? { ...c, id: ref.id, status: 'ok' } : c)));\r\n    } catch (e) {\r\n      setComments((prev) => prev.map((c) => (c.id === cmt.id ? { ...c, status: 'error' } : c)));\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"max-w-2xl mx-auto px-4 py-6\">\r\n        <div className=\"animate-pulse h-5 w-24 bg-gray-200 rounded\" />\r\n        <div className=\"mt-4 bg-white rounded-lg border border-gray-200 p-4\">\r\n          <div className=\"h-6 bg-gray-200 rounded w-3/4 mb-3\" />\r\n          <div className=\"h-4 bg-gray-200 rounded w-full mb-2\" />\r\n          <div className=\"h-4 bg-gray-200 rounded w-5/6\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!post) {\r\n    return (\r\n      <div className=\"max-w-2xl mx-auto px-4 py-6 space-y-4\">\r\n        <button\r\n          onClick={() => navigate('/staff/community')}\r\n          className=\"text-sm text-gray-600 hover:text-gray-800\"\r\n        >\r\n          ← Back to community\r\n        </button>\r\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6 text-center text-gray-600\">\r\n          Post not found.\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const timeText = post.timeAgo || '';\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-cool-gray\">\r\n      <div className=\"max-w-2xl mx-auto px-4 py-4\">\r\n        <button\r\n          onClick={() => navigate(-1)}\r\n          className=\"text-sm text-gray-600 hover:text-gray-800\"\r\n          aria-label=\"Go back\"\r\n        >\r\n          ← Back\r\n        </button>\r\n\r\n        <article className=\"mt-4 bg-white rounded-lg border border-gray-200 p-4\">\r\n          <header className=\"flex items-start justify-between gap-3\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <span className=\"inline-flex items-center px-3 h-7 min-h-[28px] rounded-full text-xs font-medium border border-deep-moss/30 text-deep-moss bg-white\">\r\n                {post.brand || 'General'}\r\n              </span>\r\n            </div>\r\n            {timeText && (\r\n              <time className=\"text-xs text-warm-gray\">{timeText}</time>\r\n            )}\r\n          </header>\r\n\r\n          <h1\r\n            ref={headingRef}\r\n            tabIndex={-1}\r\n            className=\"mt-3 text-xl font-semibold text-gray-900\"\r\n          >\r\n            {post.title || 'Update'}\r\n          </h1>\r\n\r\n          {post.content && (\r\n            <div className=\"mt-2 text-gray-800 whitespace-pre-wrap\">{post.content}</div>\r\n          )}\r\n\r\n          {post.trainingId && (\r\n            <section className=\"mt-6 border-t border-gray-100 pt-4\">\r\n              <h2 className=\"text-sm font-medium text-gray-900\">Related training</h2>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => { postOpenTraining({ postId: post.id, trainingId: post.trainingId }); navigate(`/staff/trainings/${post.trainingId}`); }}\r\n                className=\"mt-2 inline-flex items-center justify-center px-3 h-11 min-h-[44px] rounded-md border border-deep-moss text-sm text-deep-moss hover:bg-oat-beige\"\r\n                aria-label=\"View related training\"\r\n              >\r\n                {COPY.buttons.viewTraining}\r\n              </button>\r\n            </section>\r\n          )}\r\n\r\n          <footer className=\"mt-6 flex items-center gap-3\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleLike}\r\n              className={`inline-flex items-center justify-center px-3 h-11 min-h-[44px] rounded-md border text-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-1 ${\r\n                liked ? 'border-rose-500 text-rose-600 bg-rose-50' : 'border-gray-300 text-gray-700 hover:bg-gray-50'\r\n              }`}\r\n              aria-pressed={liked ? 'true' : 'false'}\r\n              aria-label={liked ? `Unlike post (${likeIds.length} likes)` : `Like post (${likeIds.length} likes)`}\r\n              data-testid=\"like-button\"\r\n            >\r\n              <span className=\"mr-1\" aria-hidden>\r\n                {liked ? '❤️' : '🤍'}\r\n              </span>\r\n              <span>{COPY.buttons.like}</span>\r\n              <span className=\"ml-2 text-gray-500\">{likeIds.length}</span>\r\n            </button>\r\n            {likeError && (\r\n              <span className=\"text-xs text-red-600\">{likeError}</span>\r\n            )}\r\n\r\n            <a\r\n              href=\"#comment\"\r\n              className=\"inline-flex items-center justify-center px-3 h-11 min-h-[44px] rounded-md border border-gray-300 text-sm text-gray-700 hover:bg-gray-50 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-1\"\r\n              aria-label={`Jump to comments (${comments.length} comments)`}\r\n            >\r\n              <span className=\"mr-1\" aria-hidden>💬</span>\r\n              <span>{COPY.buttons.comment}</span>\r\n              <span className=\"ml-2 text-gray-500\">{comments.length}</span>\r\n            </a>\r\n          </footer>\r\n        </article>\r\n\r\n        {/* Comments */}\r\n        <section id=\"comments\" className=\"mt-4\">\r\n          <h2 className=\"sr-only\">Comments</h2>\r\n          {comments.length === 0 ? (\r\n            <div className=\"text-sm text-warm-gray\">No comments yet.</div>\r\n          ) : (\r\n            <ul className=\"space-y-3\">\r\n              {comments.map((c) => (\r\n                <li key={c.id} className=\"bg-white rounded-lg border border-gray-200 p-3\">\r\n                  <div className=\"flex items-center justify-between text-xs text-gray-500\">\r\n                    <span>{c.userRole || 'user'}</span>\r\n                    <span>\r\n                      {typeof c.createdAt?.toDate === 'function'\r\n                        ? c.createdAt.toDate().toLocaleString()\r\n                        : (c.createdAt instanceof Date ? c.createdAt.toLocaleString() : 'Recently')}\r\n                    </span>\r\n                  </div>\r\n                  <p className=\"mt-1 text-sm text-gray-800\">{c.text}</p>\r\n                  {c.status === 'error' && (\r\n                    <div className=\"mt-2 flex items-center gap-2 text-xs text-red-600\">\r\n                      <span>{COPY.errors.generic}</span>\r\n              <button\r\n                        type=\"button\"\r\n                        onClick={() => retrySendComment(c)}\r\n                className=\"mt-2 inline-flex items-center justify-center px-3 h-11 min-h-[44px] rounded-md border border-deep-moss text-sm text-deep-moss hover:bg-oat-beige focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-1\"\r\n                      >\r\n                        Retry\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                  {c.status === 'pending' && (\r\n                    <div className=\"mt-2 text-xs text-gray-500\">Sending…</div>\r\n                  )}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </section>\r\n      </div>\r\n\r\n      {/* Composer – sticky bottom */}\r\n      <div className=\"sticky bottom-0 inset-x-0 border-t border-gray-200 bg-white\">\r\n        <div className=\"max-w-2xl mx-auto px-4 py-3 flex items-center gap-2\">\r\n          <input\r\n            id=\"comment\"\r\n            type=\"text\"\r\n            value={newComment}\r\n            onChange={(e) => setNewComment(e.target.value)}\r\n            placeholder=\"Add a comment…\"\r\n            aria-label=\"Add a comment\"\r\n            className=\"flex-1 px-3 py-3 h-11 min-h-[44px] border border-gray-300 rounded-md text-sm\"\r\n            data-testid=\"comment-input\"\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            onClick={handleAddComment}\r\n            className=\"px-3 h-11 min-h-[44px] rounded-md bg-deep-moss text-white text-sm hover:bg-sage-dark disabled:opacity-50\"\r\n            disabled={!newComment.trim()}\r\n            data-testid=\"comment-submit\"\r\n          >\r\n            Post\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"file":"assets/PostDetail-CluOUWl6.js"}